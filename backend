from flask import Flask, jsonify, request
from ultralytics import YOLO  # or whatever library you're using
import os
import numpy as np
import time
from PIL import Image
from flask_cors import CORS

app = Flask(__name__)
CORS(app, resources={r"/*": {"origins": "*"}}, supports_credentials=True)

# Load your model
model = YOLO('runs/classify/train10/weights/last.pt')  # Update with the correct path to your model

@app.route('/')
def home():
    return "Welcome to the Local API!"

@app.route('/api/predict', methods=['POST'])
def predict():
    # Check if 'file' key is present in the request
    if 'file' not in request.files:
        print("No file part in request")
        return jsonify({'error': 'No file found'}), 400

    file = request.files['file']

    # Generate a unique filename and save the uploaded file
    unique_filename = f"{int(time.time())}_{file.filename}"
    file_path = os.path.join('uploads', unique_filename)
    print(f"Saving uploaded file as: {file_path}")

    try:
        # Save file to the 'uploads' directory
        file.save(file_path)
        print(f"File saved successfully: {file.filename}, size: {file.content_length} bytes")

        # Verify the image using PIL
        try:
            with Image.open(file_path) as img:
                print(f"Image format: {img.format}, size: {img.size}, mode: {img.mode}")
                img.load()  # Load the image into memory to check if it's valid
                img.save(file_path)  # Re-save to ensure it can be handled properly
                print(f"Image {file.filename} opened and re-saved successfully")
        except Exception as e:
            print(f"Image processing failed: {e}")
            return jsonify({'error': f'Uploaded image is invalid or corrupted: {str(e)}'}), 400


        # Perform prediction with the model
        print(f"Running prediction on: {file_path}")
        try:
            results = model(file_path)  # Run model on the uploaded image
            print(f"Prediction results: {results}")

            # Process model output (adjust based on your model's structure)
            names_dict = results[0].names
            probs = results[0].probs.tolist()
            prediction = names_dict[np.argmax(probs)]

            print(f"Prediction: {prediction}")
            return jsonify({'prediction': prediction})
        except Exception as e:
            print(f"Prediction error: {e}")
            return jsonify({'error': 'Prediction failed', 'details': str(e)}), 500
    finally:
        # Clean up the file after processing
        if os.path.exists(file_path):
            print(f"Cleaning up: Deleting file {file_path}")
            os.remove(file_path)
        else:
            print(f"File {file_path} does not exist. Skipping cleanup.")

if __name__ == '__main__':
    # Ensure 'uploads' directory exists
    os.makedirs('uploads', exist_ok=True)
    print("Starting Flask server...")
    app.run(host='0.0.0.0', port=5000)
